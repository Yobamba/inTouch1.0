<!DOCTYPE html>
<html>
<head>
    <title>Chat Interface</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100vh;
            background-color: #f0f2f5;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: white;
        }
        .header {
            padding: 15px 20px;
            background-color: #1877f2;
            color: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .header h1 {
            margin: 0;
            font-size: 1.5em;
        }
        .psid-input {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        #psidInput {
            padding: 8px;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            width: 200px;
        }
        .chat-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            background-color: #f0f2f5;
        }
        .message-row {
            display: flex;
            width: 100%;
            margin-bottom: 10px;
        }
        .message-row.user {
            justify-content: flex-end;
        }
        .message-row.page {
            justify-content: flex-start;
        }
        .message-content {
            max-width: 70%;
            display: flex;
            flex-direction: column;
        }
        .message-bubble {
            padding: 8px 12px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            margin: 2px 0;
        }
        .user .message-bubble {
            background-color: #0084ff;
            color: white;
            border-bottom-right-radius: 4px;
        }
        .page .message-bubble {
            background-color: white;
            color: black;
            border-bottom-left-radius: 4px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        .timestamp {
            font-size: 0.7em;
            color: #65676b;
            margin: 2px 8px;
        }
        .user .timestamp {
            text-align: right;
        }
        .page .timestamp {
            text-align: left;
        }
        .input-container {
            padding: 15px;
            background-color: white;
            border-top: 1px solid #e4e6eb;
            display: flex;
            gap: 10px;
            align-items: center;
        }
        #messageInput {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #e4e6eb;
            border-radius: 20px;
            font-size: 14px;
            resize: none;
            height: 20px;
            max-height: 100px;
            overflow-y: auto;
        }
        button {
            background-color: #1877f2;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
        }
        button:hover {
            background-color: #166fe5;
        }
        .date-separator {
            text-align: center;
            margin: 20px 0;
            position: relative;
        }
        .date-separator::before {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #ccd0d5;
        }
        .date-separator::after {
            content: '';
            position: absolute;
            right: 0;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #ccd0d5;
        }
        .date-text {
            background-color: #f0f2f5;
            padding: 0 10px;
            color: #65676b;
            font-size: 0.9em;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #65676b;
            display: none;
        }
        #downloadJson {
            padding: 6px 12px;
            font-size: 12px;
            background-color: #ffffff;
            color: #1877f2;
            border: 1px solid #1877f2;
        }
        #downloadJson:hover {
            background-color: #f0f2f5;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Chat Interface</h1>
            <div class="psid-input">
                <input type="text" id="psidInput" placeholder="Enter PSID">
                <button onclick="loadConversation()">Connect</button>
                <button id="downloadJson">Download JSON</button>
            </div>
        </div>

        <div id="loading" class="loading">Loading conversation...</div>
        <div id="conversation" class="chat-container"></div>

        <div class="input-container">
            <textarea 
                id="messageInput" 
                placeholder="Type a message..."
                onkeydown="handleKeyPress(event)"
            ></textarea>
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        const PAGE_ID = "8750657048323051";
        const USER_ID = "475816382274514";
        let currentPsid = null;

        // Auto-expand textarea as user types
        const messageInput = document.getElementById('messageInput');
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message || !currentPsid) return;

            try {
                const response = await fetch('/send-custom-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        message,
                        psid: currentPsid
                    })
                });

                if (response.ok) {
                    messageInput.value = '';
                    messageInput.style.height = 'auto';
                    // Reload conversation to show new message
                    loadConversation();
                } else {
                    const error = await response.json();
                    alert('Error sending message: ' + error.message);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Error sending message');
            }
        }

        function formatDate(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);

            const timeStr = date.toLocaleTimeString([], { 
                hour: '2-digit', 
                minute: '2-digit'
            });

            if (date.toDateString() === now.toDateString()) {
                return `Today at ${timeStr}`;
            } else if (date.toDateString() === yesterday.toDateString()) {
                return `Yesterday at ${timeStr}`;
            } else {
                return `${date.toLocaleDateString()} at ${timeStr}`;
            }
        }

        function formatDateForSeparator(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);

            if (date.toDateString() === now.toDateString()) {
                return 'Today';
            } else if (date.toDateString() === yesterday.toDateString()) {
                return 'Yesterday';
            } else {
                return date.toLocaleDateString(undefined, { 
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            }
        }

        async function loadConversation() {
            try {
                const psid = document.getElementById('psidInput').value;
                if (!psid) {
                    alert('Please enter a PSID');
                    return;
                }

                currentPsid = psid;
                document.getElementById('loading').style.display = 'block';
                document.getElementById('conversation').innerHTML = '';

                const response = await fetch(`/conversation/${psid}`);
                const data = await response.json();
                
                if (response.status !== 200) {
                    throw new Error(data.error || 'Failed to load conversation');
                }

                window.conversationData = data;

                const conversationDiv = document.getElementById('conversation');
                conversationDiv.innerHTML = '';

                let currentDate = '';

                data.messages.forEach(msg => {
                    const messageDate = formatDateForSeparator(msg.timestamp);
                    
                    if (messageDate !== currentDate) {
                        const dateDiv = document.createElement('div');
                        dateDiv.className = 'date-separator';
                        dateDiv.innerHTML = `<span class="date-text">${messageDate}</span>`;
                        conversationDiv.appendChild(dateDiv);
                        currentDate = messageDate;
                    }

                    // Swap the logic: if senderId is USER_ID, it's a user message
                    const isUserMessage = msg.senderId === USER_ID;
                    
                    const messageRow = document.createElement('div');
                    messageRow.className = `message-row ${isUserMessage ? 'user' : 'page'}`;
                    
                    const messageContent = document.createElement('div');
                    messageContent.className = 'message-content';
                    
                    const messageBubble = document.createElement('div');
                    messageBubble.className = 'message-bubble';
                    messageBubble.textContent = msg.message;
                    
                    const timestampDiv = document.createElement('div');
                    timestampDiv.className = 'timestamp';
                    timestampDiv.textContent = formatDate(msg.timestamp);
                    
                    messageContent.appendChild(messageBubble);
                    messageContent.appendChild(timestampDiv);
                    messageRow.appendChild(messageContent);
                    conversationDiv.appendChild(messageRow);
                });

                document.getElementById('loading').style.display = 'none';
                conversationDiv.scrollTop = conversationDiv.scrollHeight;
            } catch (error) {
                console.error('Error loading conversation:', error);
                document.getElementById('conversation').innerHTML = 'Error loading conversation: ' + error.message;
                document.getElementById('loading').style.display = 'none';
            }
        }

        document.getElementById('downloadJson').addEventListener('click', () => {
            if (!window.conversationData) {
                alert('Please load a conversation first');
                return;
            }

            const dataStr = JSON.stringify(window.conversationData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = window.URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'conversation.json';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
        });
    </script>
</body>
</html>
