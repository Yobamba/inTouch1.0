<!DOCTYPE html>
<html lang="en">
<head>
    <title>Chat Interface</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100vh;
            background-color: #f0f2f5;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: white;
        }
        .header {
            padding: 12px 20px;
            background-color: #1877f2;
            color: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .header h1 {
            margin: 0;
            font-size: 1.5em;
        }
        .header-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .psid-input {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        #psidInput {
            padding: 6px 8px;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            width: 200px;
        }
        .chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 8px;
            background-color: #f0f2f5;
            min-height: 200px; /* Ensure minimum height for content */
            max-height: calc(100vh - 120px); /* Subtract header and input heights */
        }
        .message-row {
            display: flex;
            width: 100%;
            margin-bottom: 8px;
        }
        .message-row.user {
            justify-content: flex-end;
        }
        .message-row.page {
            justify-content: flex-start;
        }
        .message-content {
            max-width: 70%;
            display: flex;
            flex-direction: column;
        }
        .message-bubble {
            padding: 8px 12px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            margin: 2px 0;
        }
        .user .message-bubble {
            background-color: #0084ff;
            color: white;
            border-bottom-right-radius: 4px;
        }
        .page .message-bubble {
            background-color: white;
            color: black;
            border-bottom-left-radius: 4px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        .timestamp {
            font-size: 0.7em;
            color: #595959;
            margin: 2px 8px;
        }
        .user .timestamp {
            text-align: right;
        }
        .page .timestamp {
            text-align: left;
        }
        .input-container {
            padding: 10px;
            background-color: white;
            border-top: 1px solid #e4e6eb;
            display: flex;
            gap: 10px;
            align-items: center;
            height: 44px; /* Fixed height for input container */
        }
        #messageInput {
            flex-grow: 1;
            padding: 8px 12px;
            border: 1px solid #e4e6eb;
            border-radius: 20px;
            font-size: 14px;
            resize: none;
            height: 20px;
            max-height: 20px; /* Limit the height */
            overflow-y: auto;
            line-height: 20px;
        }
        button {
            background-color: #1877f2;
            color: #000000;
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
            height: 32px; /* Fixed height for buttons */
        }
        button:hover {
            background-color: #166fe5;
        }
        #logoutButton {
            background-color: #dc3545;
        }
        #logoutButton:hover {
            background-color: #bb2d3b;
        }
        .date-separator {
            text-align: center;
            margin: 15px 0;
            position: relative;
        }
        .date-separator::before {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #ccd0d5;
        }
        .date-separator::after {
            content: '';
            position: absolute;
            right: 0;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #ccd0d5;
        }
        .date-text {
            background-color: #f0f2f5;
            padding: 0 10px;
            color: #595959;
            font-size: 0.9em;
        }
        .loading {
            text-align: center;
            padding: 15px;
            color: #595959;
            display: none;
        }
        #downloadJson {
            padding: 6px 12px;
            font-size: 12px;
            background-color: #ffffff;
            color: #000000;
            border: 1px solid #000000;
        }
        #downloadJson:hover {
            background-color: #f0f2f5;
        }
        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-left: 8px;
            background-color: #31a24c;
        }
        .status-indicator.offline {
            background-color: #595959;
        }
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        .input-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        main {
            display: flex;
            flex-direction: column;
            flex: 1;
            min-height: 0; /* Allow flex container to shrink */
        }
    </style>
</head>
<body>
    <div class="container">
        <header role="banner" class="header">
            <h1>Chat Interface <span id="statusIndicator" class="status-indicator offline" aria-label="Connection Status"></span></h1>
            <nav role="navigation" class="header-controls">
                <div class="psid-input">
                    <div class="input-group">
                        <label for="psidInput" class="sr-only">Enter PSID</label>
                        <input type="text" id="psidInput" placeholder="Enter PSID" aria-label="Enter PSID">
                        <button onclick="startChat()">Connect</button>
                        <button id="downloadJson">Download JSON</button>
                    </div>
                </div>
                <button id="logoutButton" onclick="logout()">Logout</button>
            </nav>
        </header>

        <main role="main">
            <div id="loading" class="loading" role="status">Loading conversation...</div>
            <div id="conversation" class="chat-container" role="log" aria-live="polite"></div>

            <div class="input-container" role="form" aria-label="Message input form">
                <label for="messageInput" class="sr-only">Type a message</label>
                <textarea 
                    id="messageInput" 
                    placeholder="Type a message..."
                    onkeydown="handleKeyPress(event)"
                    aria-label="Type a message"
                ></textarea>
                <button onclick="sendMessage()">Send</button>
            </div>
        </main>
    </div>

    <script>
        // JavaScript remains unchanged
        const PAGE_ID = "8750657048323051";
        const USER_ID = "475816382274514";
        let currentPsid = null;
        let lastMessageTimestamp = null;
        let updateInterval = null;
        let isPolling = false;

        function logout() {
            fetch('/logout', {
                method: 'POST',
                credentials: 'same-origin'
            }).then(() => {
                window.location.href = '/login';
            }).catch(error => {
                console.error('Error logging out:', error);
                alert('Error logging out');
            });
        }

        // Auto-expand textarea as user types
        const messageInput = document.getElementById('messageInput');
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        function startChat() {
            const psid = document.getElementById('psidInput').value;
            if (!psid) {
                alert('Please enter a PSID');
                return;
            }

            currentPsid = psid;
            document.getElementById('statusIndicator').classList.remove('offline');
            
            // Initial load
            loadConversation(true);
            
            // Start polling for updates
            if (!isPolling) {
                isPolling = true;
                updateInterval = setInterval(() => loadConversation(false), 3000);
            }
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message || !currentPsid) return;

            try {
                const response = await fetch('/send-custom-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        message,
                        psid: currentPsid
                    })
                });

                if (response.ok) {
                    messageInput.value = '';
                    messageInput.style.height = 'auto';
                    // Message will appear in next poll
                } else {
                    const error = await response.json();
                    alert('Error sending message: ' + error.message);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Error sending message');
            }
        }

        function formatDate(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);

            const timeStr = date.toLocaleTimeString([], { 
                hour: '2-digit', 
                minute: '2-digit'
            });

            if (date.toDateString() === now.toDateString()) {
                return `Today at ${timeStr}`;
            } else if (date.toDateString() === yesterday.toDateString()) {
                return `Yesterday at ${timeStr}`;
            } else {
                return `${date.toLocaleDateString()} at ${timeStr}`;
            }
        }

        function formatDateForSeparator(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);

            if (date.toDateString() === now.toDateString()) {
                return 'Today';
            } else if (date.toDateString() === yesterday.toDateString()) {
                return 'Yesterday';
            } else {
                return date.toLocaleDateString(undefined, { 
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            }
        }

        async function loadConversation(isInitialLoad = false) {
            if (!currentPsid) return;

            try {
                if (isInitialLoad) {
                    document.getElementById('loading').style.display = 'block';
                    document.getElementById('conversation').innerHTML = '';
                }

                const response = await fetch(`/conversation/${currentPsid}`);
                const data = await response.json();
                
                if (response.status !== 200) {
                    throw new Error(data.error || 'Failed to load conversation');
                }

                // Check if there are new messages
                const latestMessageTimestamp = data.messages.length > 0 
                    ? new Date(data.messages[data.messages.length - 1].timestamp).getTime()
                    : null;

                if (!isInitialLoad && latestMessageTimestamp === lastMessageTimestamp) {
                    // No new messages
                    return;
                }

                window.conversationData = data;
                lastMessageTimestamp = latestMessageTimestamp;

                const conversationDiv = document.getElementById('conversation');
                conversationDiv.innerHTML = '';

                let currentDate = '';
                const wasScrolledToBottom = isScrolledToBottom(conversationDiv);

                data.messages.forEach(msg => {
                    const messageDate = formatDateForSeparator(msg.timestamp);
                    
                    if (messageDate !== currentDate) {
                        const dateDiv = document.createElement('div');
                        dateDiv.className = 'date-separator';
                        dateDiv.innerHTML = `<span class="date-text">${messageDate}</span>`;
                        conversationDiv.appendChild(dateDiv);
                        currentDate = messageDate;
                    }

                    const isUserMessage = msg.senderId === USER_ID;
                    
                    const messageRow = document.createElement('div');
                    messageRow.className = `message-row ${isUserMessage ? 'user' : 'page'}`;
                    messageRow.setAttribute('role', 'listitem');
                    
                    const messageContent = document.createElement('div');
                    messageContent.className = 'message-content';
                    
                    const messageBubble = document.createElement('div');
                    messageBubble.className = 'message-bubble';
                    messageBubble.textContent = msg.message;
                    
                    const timestampDiv = document.createElement('div');
                    timestampDiv.className = 'timestamp';
                    timestampDiv.textContent = formatDate(msg.timestamp);
                    
                    messageContent.appendChild(messageBubble);
                    messageContent.appendChild(timestampDiv);
                    messageRow.appendChild(messageContent);
                    conversationDiv.appendChild(messageRow);
                });

                if (isInitialLoad) {
                    document.getElementById('loading').style.display = 'none';
                }

                // Only scroll to bottom if we were already at the bottom
                // or if this is the initial load
                if (isInitialLoad || wasScrolledToBottom) {
                    conversationDiv.scrollTop = conversationDiv.scrollHeight;
                }
            } catch (error) {
                console.error('Error loading conversation:', error);
                if (isInitialLoad) {
                    document.getElementById('conversation').innerHTML = 'Error loading conversation: ' + error.message;
                    document.getElementById('loading').style.display = 'none';
                }
                // Stop polling on error
                stopPolling();
            }
        }

        function isScrolledToBottom(element) {
            const threshold = 50; // pixels from bottom to consider "scrolled to bottom"
            return element.scrollHeight - element.scrollTop - element.clientHeight < threshold;
        }

        function stopPolling() {
            if (updateInterval) {
                clearInterval(updateInterval);
                updateInterval = null;
            }
            isPolling = false;
            document.getElementById('statusIndicator').classList.add('offline');
        }

        // Clean up when leaving the page
        window.addEventListener('beforeunload', stopPolling);

        document.getElementById('downloadJson').addEventListener('click', () => {
            if (!window.conversationData) {
                alert('Please load a conversation first');
                return;
            }

            const dataStr = JSON.stringify(window.conversationData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = window.URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'conversation.json';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
        });
    </script>
</body>
</html>
