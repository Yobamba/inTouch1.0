<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Instagram Chat</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/instagram-chat.css">
    <style>
        .message-row {
            display: flex;
            width: 100%;
            margin-bottom: 10px;
        }
        .message-row.sent {
            justify-content: flex-end;
        }
        .message-row.received {
            justify-content: flex-start;
        }
        .message-content {
            max-width: 70%;
            display: flex;
            flex-direction: column;
        }
        .message-bubble {
            padding: 8px 12px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            margin: 2px 0;
        }
        .sent .message-bubble {
            background-color: #0084ff;
            color: white;
            border-bottom-right-radius: 4px;
        }
        .received .message-bubble {
            background-color: white;
            color: black;
            border-bottom-left-radius: 4px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        .timestamp {
            font-size: 0.7em;
            color: #65676b;
            margin: 2px 8px;
        }
        .sent .timestamp {
            text-align: right;
        }
        .received .timestamp {
            text-align: left;
        }
        .date-separator {
            text-align: center;
            margin: 20px 0;
            position: relative;
        }
        .date-separator::before {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #ccd0d5;
        }
        .date-separator::after {
            content: '';
            position: absolute;
            right: 0;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #ccd0d5;
        }
        .date-text {
            background-color: #f0f2f5;
            padding: 0 10px;
            color: #65676b;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="container chat-container">
        <div class="platform-switch">
            <a href="/chat" class="btn btn-outline-primary">Switch to Messenger</a>
            <a href="/instagram-chat" class="btn btn-primary active">Instagram Chat</a>
        </div>

        <div class="user-info">
            <h5>Instagram Chat</h5>
            <div class="form-group">
                <label for="senderId">Sender ID (Instagram Account):</label>
                <input type="text" class="form-control" id="senderId" value="475816382274514" readonly>
            </div>
            <div class="form-group">
                <label for="recipientId">Recipient ID (Instagram Account):</label>
                <input type="text" class="form-control" id="recipientId" value="606648068569151" readonly>
            </div>
            <button class="btn btn-primary" onclick="startChat()">Start Chat</button>
        </div>

        <div id="loading" class="loading">Loading conversation...</div>
        <div id="conversation" class="message-container"></div>

        <div class="message-input-container">
            <input type="text" class="form-control message-input" id="messageInput" placeholder="Type your message..." disabled>
            <button class="btn btn-primary send-button" id="sendButton" disabled>Send</button>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        let currentUserId = null;
        let lastMessageTimestamp = null;
        let updateInterval = null;
        let isPolling = false;

        function formatDate(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);

            const timeStr = date.toLocaleTimeString([], { 
                hour: '2-digit', 
                minute: '2-digit'
            });

            if (date.toDateString() === now.toDateString()) {
                return `Today at ${timeStr}`;
            } else if (date.toDateString() === yesterday.toDateString()) {
                return `Yesterday at ${timeStr}`;
            } else {
                return `${date.toLocaleDateString()} at ${timeStr}`;
            }
        }

        function formatDateForSeparator(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);

            if (date.toDateString() === now.toDateString()) {
                return 'Today';
            } else if (date.toDateString() === yesterday.toDateString()) {
                return 'Yesterday';
            } else {
                return date.toLocaleDateString(undefined, { 
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            }
        }

        async function loadConversation(isInitialLoad = false) {
            if (!currentUserId) return;

            try {
                if (isInitialLoad) {
                    document.getElementById('loading').style.display = 'block';
                    document.getElementById('conversation').innerHTML = '';
                }

                const response = await fetch(`/instagram/conversation/${currentUserId}`);
                const data = await response.json();
                
                if (response.status !== 200) {
                    throw new Error(data.error || 'Failed to load conversation');
                }

                // Check if there are new messages
                const latestMessageTimestamp = data.messages.length > 0 
                    ? new Date(data.messages[data.messages.length - 1].timestamp).getTime()
                    : null;

                if (!isInitialLoad && latestMessageTimestamp === lastMessageTimestamp) {
                    // No new messages
                    return;
                }

                lastMessageTimestamp = latestMessageTimestamp;
                const conversationDiv = document.getElementById('conversation');
                conversationDiv.innerHTML = '';

                let currentDate = '';
                const wasScrolledToBottom = isScrolledToBottom(conversationDiv);

                data.messages.forEach(msg => {
                    const messageDate = formatDateForSeparator(msg.timestamp);
                    
                    if (messageDate !== currentDate) {
                        const dateDiv = document.createElement('div');
                        dateDiv.className = 'date-separator';
                        dateDiv.innerHTML = `<span class="date-text">${messageDate}</span>`;
                        conversationDiv.appendChild(dateDiv);
                        currentDate = messageDate;
                    }

                    const messageRow = document.createElement('div');
                    messageRow.className = `message-row ${msg.sender === 'User' ? 'sent' : 'received'}`;
                    
                    const messageContent = document.createElement('div');
                    messageContent.className = 'message-content';
                    
                    const messageBubble = document.createElement('div');
                    messageBubble.className = 'message-bubble';
                    messageBubble.textContent = msg.message;
                    
                    const timestampDiv = document.createElement('div');
                    timestampDiv.className = 'timestamp';
                    timestampDiv.textContent = formatDate(msg.timestamp);
                    
                    messageContent.appendChild(messageBubble);
                    messageContent.appendChild(timestampDiv);
                    messageRow.appendChild(messageContent);
                    conversationDiv.appendChild(messageRow);
                });

                if (isInitialLoad) {
                    document.getElementById('loading').style.display = 'none';
                }

                // Only scroll to bottom if we were already at the bottom
                // or if this is the initial load
                if (isInitialLoad || wasScrolledToBottom) {
                    conversationDiv.scrollTop = conversationDiv.scrollHeight;
                }
            } catch (error) {
                console.error('Error loading conversation:', error);
                if (isInitialLoad) {
                    document.getElementById('conversation').innerHTML = 'Error loading conversation: ' + error.message;
                    document.getElementById('loading').style.display = 'none';
                }
                stopPolling();
            }
        }

        function isScrolledToBottom(element) {
            const threshold = 50; // pixels from bottom to consider "scrolled to bottom"
            return element.scrollHeight - element.scrollTop - element.clientHeight < threshold;
        }

        function startChat() {
            const userId = document.getElementById('senderId').value;
            if (!userId) {
                alert('Please enter a User ID');
                return;
            }

            currentUserId = userId;
            document.getElementById('messageInput').disabled = false;
            document.getElementById('sendButton').disabled = false;
            
            // Initial load
            loadConversation(true);
            
            // Start polling for updates
            if (!isPolling) {
                isPolling = true;
                updateInterval = setInterval(() => loadConversation(false), 3000);
            }
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            const recipientId = document.getElementById('recipientId').value;
            
            if (!message || !currentUserId) return;

            try {
                const response = await fetch('/instagram/send-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        message,
                        userId: recipientId // Send to page ID
                    })
                });

                if (response.ok) {
                    messageInput.value = '';
                } else {
                    const error = await response.json();
                    alert('Error sending message: ' + error.message);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Error sending message');
            }
        }

        function stopPolling() {
            if (updateInterval) {
                clearInterval(updateInterval);
                updateInterval = null;
            }
            isPolling = false;
        }

        // Handle enter key press
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });

        // Add click handler for send button
        document.getElementById('sendButton').addEventListener('click', sendMessage);

        // Clean up when leaving the page
        window.addEventListener('beforeunload', stopPolling);
    </script>
</body>
</html>
